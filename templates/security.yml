---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This is the security stack template for my-ha-architecture. Resource defined on this template: IamRoles, WAFs" 

Parameters:
  Environment:
    Type: String
    AllowedValues: ["prod", "dev"]
    Description: "Sets the environment."
    ConstraintDescription: "must specify prod or dev."
  EcsTaskPolicyName:
    Type: String
    Default: ecs-policy
    Description: "Custom policy that allow task to interact with AWS Resources"
  Ec2PolicyName:
    Type: String
    Default: ec2-policy
    Description: "Custom policy that allow task to interact with AWS Resources"
  EcsTaskRoleName: 
    Type: String
    Default: ecs-task-role
    Description: "ECS Execution Role"
  EcsServiceRole:
    Type: String
    Default: "arn:aws:iam::358441290192:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
    Description: "Role to enable Amazon ECS to manage your cluster."
  RolesPath:
    Description: 'path for custom created roles' 
    Type: String
    Default: "/service-role/"
  BastionPolicyName:
    Type: String
    Default: bastion-policy
    Description: "Custom policy that allow bastion to update DNS record"

Resources:
  EcsTaskPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ['s3:List*', 's3:Get*', 's3:PutObject', 's3:DeleteObject']
            Resource: "*"
      PolicyName: !Join [ "-" , [!Ref Environment, !Ref EcsTaskPolicyName]]
      Roles:
        - !Ref EcsTaskRole
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: ECS Task Role
      Path: "/service-role/"
      RoleName: !Join [ "-" , [!Ref Environment, !Ref EcsTaskRoleName]]
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: !Ref RolesPath
      Roles: [!Ref 'Ec2Role']
  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: !Ref RolesPath
      Policies:
      - PolicyName: !Join [ "-" , [!Ref Environment, !Ref Ec2PolicyName]]
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DescribeServices'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'cloudwatch:PutMetricData'
              - 'cloudformation:SignalResource'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: !Ref RolesPath
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: !Ref RolesPath
      Roles: [!Ref 'BastionRole']
  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: !Ref RolesPath
      Policies:
      - PolicyName: !Join [ "-" , [!Ref Environment, !Ref BastionPolicyName]]
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'route53:ChangeResourceRecordSets'
              - 'cloudformation:SignalResource'
            Resource: '*'

Outputs:
  EcsServiceRole:
    Description: "AWS Managed Role"
    Value: !Ref EcsServiceRole
    Export:
      Name: ECS-TASK-EXECUTION-ROLE
  EcsTaskRole:
    Description: "Custom Role for tasks"
    Value: !Ref EcsTaskRole
    Export:
      Name: ECS-TASK-ROLE
  EcsTaskPolicy:
    Description: "Custom Policy for tasks"
    Value: !Ref EcsTaskPolicy
    Export:
      Name: ECS-TASK-POlICY
  Ec2InstanceProfile:
    Description: "Instance Profile"
    Value: !Ref Ec2InstanceProfile
    Export:
      Name: EC2-INSTANCE-PROFILE
  Ec2Role:
    Description: "Role for instances on ECS Cluster"
    Value: !Ref Ec2Role
    Export:
      Name: EC2-ROLE
  AutoScalingRole:
    Description: "Role to manage Auto Scaling"
    Value: !Ref AutoScalingRole
    Export:
      Name: AUTO-SCALING-ROLE
  BastionInstanceProfile:
    Description: BastionInstanceProfile
    Value: !Ref BastionInstanceProfile
    Export: 
      Name: BASTION-INSTANCE-PROFILE
  BastionRole:
    Description: BastionRole
    Value: !Ref BastionRole
    Export: 
      Name: BASTION-ROLE