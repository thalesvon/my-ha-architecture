---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This is the compute stack template for my-ha-architecture. Resource defined on this template:
ECS Cluster/Services/Task, Load Balancers and Target Groups."

Parameters: 
  Environment:
    Type: String
    AllowedValues: ["prod", "dev"]
    Description: "Sets the environment."
    ConstraintDescription: "must specify prod or dev."
  VpcId:
    Type: String
    Description: "VPC from child network stack"
  PublicSubnet101Id:
    Type: String
    Description : "must be a public subnet Id"
  PublicSubnet102Id:
    Type: String
    Description : "must be a public subnet Id"
  PublicSubnet103Id:
    Type: String
    Description : "must be a public subnet Id"
  PrivateSubnet1Id:
    Type: String
    Description : "must be a private subnet Id"
  PrivateSubnet2Id:
    Type: String
    Description : "must be a private subnet Id"
  PrivateSubnet3Id:
    Type: String
    Description : "must be a private subnet Id"
  Ec2InstanceProfile:
    Type: String
    Description : "Instance Profile"
  EcsTaskRole:
    Type: String
    Description : "Task Role"
  EcsServiceRole:
    Type: String
    Description : "Service Role"
  EcsLogGroupPrefix:
    Type: String
    Default: "ecs"
    Description: "Prefix for Log Group"
  KeyName:
    Type: String
    Description: KeyName
    Default: 'key-ire'
  ContainerInstancesSecurityGroupName:
    Type: String
    Default: ecs-instances-sg
    Description: "Api service group"
  BastionFleetSecurityGroup:
    Description: "Bastion security group. Necessary to add ssh inbound rule."
    Type: String
  ContainerInstancesName:
    Type: String
    Default: ecs-instances-asg
    Description: "Api service group"
  SpotPricePerDesiredCPUUnit:
    Description: "Spot Price for CPU unit" 
    Type: String
    Default: "0.0140"
  EcsAmi:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
    Description: The Amazon Machine Image ID used for the cluster, leave it as the default value to get the latest AMI
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    Description: Class of EC2 instance used to host containers.
    AllowedValues: [ t3.micro, t3.small, t3.medium, t3.large, t3.xlarge ]
    ConstraintDescription: Please choose a valid instance type.
  MaxSize:
    Type: Number
    Default: '6'
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  AlbSgName:
    Type: String
    Default: alb-sg
    Description: "ALB security group"
  SslCertificateArn:
    Description: "ssl certificate"
    Type: String
  ApiServiceCount:
    Type: Number
    Default: 3
    Description: Number of desired running tasks of ApiService
  ApiServiceContainerPort:
    Type: Number
    Default: 8080
    Description: This is the exposed port on the ApiService Container
  ApiServiceContainerName:
    Type: String
    Default: api-service
    Description: This is the name of the ApiService Container
  ApiServiceContainerImage:
    Type: String
    Default: 358441290192.dkr.ecr.eu-west-1.amazonaws.com/my-ha-architecture/api:latest
    Description: Container Image, must be specified at stack creation
  ApiServiceMemory:
    Type: String
    Default: "2048"
    Description: The amount of memory used by task
  HostedZone:
    Description: "Dns hosted zone Id" 
    Type: String
  BaseDnsName:
    Description: "root level dns name for hosted zone"
    Type: String
  XRayContainerName:
    Description: "Container Name for XRay Daemon"
    Type: String
    Default: xray-daemon
  XRayServiceContainerImage:
    Type: String
    Default: 358441290192.dkr.ecr.eu-west-1.amazonaws.com/my-ha-architecture/xray:latest
    Description: Container Image, must be specified at stack creation
  XRayServiceContainerPort:
    Type: Number
    Default: 2020
    Description: This is the exposed port on the Xray daemon
  XRayServiceMemory:
    Type: String
    Default: "256"
    Description: The amount of memory used by task

Conditions:
  CreateProdResources: !Equals [ !Ref Environment, prod ]
  CreateDevResources: !Equals [ !Ref Environment, dev ]

Resources:
  AppLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: CreateDevResources
    DependsOn: AlbSg
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: false
        - Key: deletion_protection.enabled
          Value: false
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: true
      Name: !Join [ "-" , [ !Ref Environment, "alb"]]
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref AlbSg
      Subnets:
        - !Ref PublicSubnet101Id
        - !Ref PublicSubnet102Id
        - !Ref PublicSubnet103Id
      Type: application
  AlbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-" , [ !Ref Environment, !Ref AlbSgName ]]
      GroupDescription: Security group attached to ALB
      VpcId: !Ref VpcId 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: https inbound from internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: http inbound from internet
      SecurityGroupEgress:
        - IpProtocol: tcp  
          CidrIp: 10.0.0.0/16
          Description: range of ephemeral ports for outbound to back-end services, only to vpc
          FromPort: 32768
          ToPort: 65535
      Tags:
        -
          Key: Name
          Value: !Join [ "-" ,[ !Ref Environment, !Ref AlbSgName ]]
  AlbHTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - 
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
  AlbHTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - CertificateArn: !Ref SslCertificateArn
      DefaultActions:
        - 
          FixedResponseConfig:
            ContentType: text/html
            MessageBody: "<h2>Ok you hit the alb</h2>"
            StatusCode: "200"
          Type: fixed-response
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 443
      Protocol: HTTPS
  EcsCluster:
    DependsOn: ApiServiceTaskDefinition
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${Environment}-cluster"
  ApiService:
    DependsOn: [ EcsCluster , ApiServiceTargetGroup , AppLoadBalancer, AlbListernerRuleForApi ]
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref EcsCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: !Ref ApiServiceCount
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 120
      LaunchType: EC2
      LoadBalancers:
        - 
          ContainerName: !Join [ "-" , [!Ref Environment, !Ref ApiServiceContainerName ]]
          ContainerPort: !Ref ApiServiceContainerPort
          TargetGroupArn: !Ref ApiServiceTargetGroup
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: memory
          Type: binpack
      Role: !Ref EcsServiceRole
      SchedulingStrategy: REPLICA
      ServiceName: !Join [ "-" , [!Ref Environment, !Ref ApiServiceContainerName ]]
      TaskDefinition: !Ref ApiServiceTaskDefinition 
  ApiServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn: ApiServiceLogGroup
    Properties:
      ContainerDefinitions:
        - Name: !Join [ "-" , [!Ref Environment, !Ref ApiServiceContainerName ]]
          Image: !Ref ApiServiceContainerImage
          MemoryReservation: !Ref ApiServiceMemory
          Environment:
            - Name: AWS_XRAY_SDK_ENABLED
              Value: false
            - Name: AWS_XRAY_DAEMON_ADDRESS
              Value: !Sub "${Environment}-${XRayContainerName}:2000"
            - Name: START_SLEEP
              Value: 0
            - Name: TOGGLE_HELLO
              Value: toggle-hello
            - Name: TOGGLE_SERVER_URL
              Value: "http://localhost:4242/api"
          PortMappings:
            -
              ContainerPort: !Ref ApiServiceContainerPort
              Protocol: tcp
          Links:
            - !Join [ "-" , [!Ref Environment, !Ref XRayContainerName ]]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref ApiServiceLogGroup
              awslogs-stream-prefix: !Ref EcsLogGroupPrefix
        - Name: !Join [ "-" , [!Ref Environment, !Ref XRayContainerName ]]
          Image: !Ref XRayServiceContainerImage
          MemoryReservation: !Ref XRayServiceMemory
          Environment:
            - Name: AWS_XRAY_SDK_ENABLED
              Value: false
          PortMappings:
            -
              HostPort: 0
              ContainerPort: !Ref XRayServiceContainerPort
              Protocol: udp
      Family: !Join [ "-" , [!Ref Environment, !Ref ApiServiceContainerName , "td"]]
      Memory: 2304
      NetworkMode: bridge
      PidMode: task
  ApiServiceLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join ["/", ["" , !Ref EcsLogGroupPrefix , !Ref ApiServiceContainerName]]
      RetentionInDays: 60
  ApiServiceTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: !Join [ "-" , [ !Ref Environment , !Ref ApiServiceContainerName , "tg" ]]
      Port: !Ref ApiServiceContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
        - Key: load_balancing.algorithm.type
          Value: "round_robin"
        - Key: slow_start.duration_seconds
          Value: 30
        - Key: stickiness.enabled
          Value: false
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 86400 
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
  ApiServiceDnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt AppLoadBalancer.DNSName
        HostedZoneId: !GetAtt AppLoadBalancer.CanonicalHostedZoneID
      Comment: "dns entry for api service"
      HostedZoneId: !Ref HostedZone
      Name: !Join [ ".", [ "api" , !Ref BaseDnsName ]]
      Type: A
  AlbListernerRuleForApi:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions: #required
        - 
          TargetGroupArn : !Ref ApiServiceTargetGroup
          Type: forward

      Conditions: #required
        - 
          Field: host-header
          HostHeaderConfig:
            Values:
              - !Join [ ".", [ "api" , !Ref BaseDnsName ]]
      ListenerArn: !Ref AlbHTTPSListener
      Priority: 1
  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 300
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1Id
        - !Ref PrivateSubnet2Id
        - !Ref PrivateSubnet3Id
      LaunchConfigurationName: !Ref 'ContainerInstancesLaunchConfig'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      Tags:
        - 
            Key: Name
            PropagateAtLaunch: true
            Value: !Join [ "-" , [ !Ref Environment, !Ref ContainerInstancesName ]]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-" , [ !Ref Environment, !Ref ContainerInstancesSecurityGroupName ]]
      GroupDescription: Access to the ECS hosts that run containers
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref AlbSg
          IpProtocol: tcp
          FromPort: 32768
          ToPort: 65535
          Description: http inbound from AlbSg
        - SourceSecurityGroupId: !Ref BastionFleetSecurityGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          Description: ssh inbound from bastion
      SecurityGroupEgress:
        - IpProtocol: -1  
          CidrIp: 0.0.0.0/0
          Description: to the internet and beyond
          FromPort: 0
          ToPort: 65535
      Tags:
        -
          Key: Name
          Value: !Join [ "-" ,[ !Ref Environment, !Ref ContainerInstancesSecurityGroupName ]]
  ContainerInstancesLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      SpotPrice: !Ref SpotPricePerDesiredCPUUnit
      ImageId: !Ref EcsAmi
      SecurityGroups: [!Ref 'ContainerInstancesSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'Ec2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsAutoScalingGroup --region ${AWS::Region}

Outputs:
  ALB:
    Description: Application Load Balancer
    Value: !GetAtt AppLoadBalancer.LoadBalancerName
    Export:
      Name: ALB-NAME
  AlbSg:
    Description: Application Load Balancer SG
    Value: !Join [ "-" , [ !Ref Environment, !Ref AlbSg]]
    Export:
      Name: ALB-SG
  EcsCluster:
    Description: ECS Cluster
    Value: !Ref EcsCluster
    Export:
      Name: ECS-CLUSTER-NAME
  ApiService:
    Description: Api Service
    Value: !Ref ApiService
    Export:
      Name: API-SERVICE
  ApiServiceTargetGroup:
    Description: Api Service target group
    Value: !Ref ApiServiceTargetGroup
    Export:
      Name: API-SERVICE-TARGET-GROUP
  ApiServiceTaskDefinition:
    Description: Api Service task definition
    Value: !Ref ApiServiceTaskDefinition
    Export:
      Name: API-SERVICE-TASK-DEFINITION
  ApiServiceLogGroup:
    Description: Api Service log group 
    Value: !Ref ApiServiceLogGroup
    Export:
      Name:  API-SERVICE-LOG-GROUP
  EcsAutoScalingGroup:
    Description: Auto Scaling Group
    Value: !Ref EcsAutoScalingGroup
    Export: 
      Name: ECS-AUTO-SCALING-GROUP
  ContainerInstancesLaunchConfig:
    Description: LaunchConfig for Auto Scaling group
    Value: !Ref ContainerInstancesLaunchConfig
    Export: 
      Name: CONTAINER-INSTANCES-LAUNCH-CONFIG
  ContainerInstancesSecurityGroup:
    Description: Security groups for container instances
    Value: !Ref ContainerInstancesSecurityGroup
    Export: 
      Name: CONTAINER-INSTANCES-SECURITY-GROUP